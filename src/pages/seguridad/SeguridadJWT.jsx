import React from "react";
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
import { oneLight } from "react-syntax-highlighter/dist/esm/styles/prism";

export function SeguridadJWT() {
  return (
    <div className="max-w-4xl mx-auto px-4 py-8 text-gray-800">
      <h1 className="text-3xl font-bold mb-6">
        üîê Seguridad con JWT (JSON Web Tokens)
      </h1>

      <section className="mb-8">
        <h2 className="text-2xl font-semibold mb-4">üéØ Objetivo</h2>
        <p>
          Comprender c√≥mo funciona la autenticaci√≥n basada en JWT, su estructura
          interna, flujo de autenticaci√≥n y mejores pr√°cticas para su
          implementaci√≥n en arquitecturas RESTful y microservicios.
        </p>
      </section>

      <section className="mb-8">
        <h2 className="text-2xl font-semibold mb-4">üì¶ ¬øQu√© es un JWT?</h2>
        <p>
          JWT (JSON Web Token) es un est√°ndar abierto (RFC 7519) que permite
          intercambiar informaci√≥n entre dos partes de manera segura y compacta.
          Es ampliamente utilizado en autenticaci√≥n sin estado (stateless).
        </p>
        <p>
          Un JWT contiene informaci√≥n que ha sido firmada digitalmente para
          garantizar su integridad, usando algoritmos como HMAC SHA-256 o RSA.
        </p>
      </section>

      <section className="mb-8">
        <h2 className="text-2xl font-semibold mb-4">
          üîç Estructura de un token JWT
        </h2>
        <p>
          Un JWT consta de tres partes codificadas en Base64 y separadas por
          puntos (<code>.</code>):
        </p>
        <SyntaxHighlighter
          language="text"
          style={oneLight}
          className="rounded-md text-sm"
        >
          {`eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
.
eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikp1YW4iLCJpYXQiOjE1MTYyMzkwMjJ9
.
SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c`}
        </SyntaxHighlighter>
        <ul className="list-disc pl-5 mt-2">
          <li>
            <strong>Header</strong>: contiene el tipo de token (JWT) y el
            algoritmo de firma.
          </li>
          <li>
            <strong>Payload</strong>: incluye las <em>claims</em>, es decir,
            datos como <code>sub</code> (ID del usuario), <code>iat</code>{" "}
            (fecha de emisi√≥n), <code>exp</code> (fecha de expiraci√≥n), roles,
            entre otros.
          </li>
          <li>
            <strong>Signature</strong>: se genera combinando el header y el
            payload codificados, m√°s una clave secreta. Garantiza que el
            contenido no ha sido alterado.
          </li>
        </ul>
      </section>

      <section className="mb-8">
        <h2 className="text-2xl font-semibold mb-4">
          üîê Flujo t√≠pico de autenticaci√≥n con JWT
        </h2>
        <ol className="list-decimal pl-5">
          <li>
            El usuario env√≠a sus credenciales (usuario/contrase√±a) a un endpoint
            de autenticaci√≥n (<code>/login</code>).
          </li>
          <li>
            El servidor valida las credenciales y genera un JWT con datos
            relevantes del usuario.
          </li>
          <li>
            El token se retorna al cliente, que lo guarda en localStorage,
            sessionStorage o una cookie segura.
          </li>
          <li>
            En cada solicitud subsecuente, el cliente env√≠a el token en el
            encabezado HTTP <code>Authorization: Bearer &lt;token&gt;</code>.
          </li>
          <li>
            El servidor verifica la firma del token y extrae las claims para
            validar permisos y autenticaci√≥n.
          </li>
        </ol>
        <p className="mt-4">
          Este modelo es especialmente √∫til en arquitecturas SPA y
          microservicios donde se requiere que cada servicio valide las
          credenciales sin mantener sesiones centralizadas.
        </p>
      </section>

      <section className="mb-8">
        <h2 className="text-2xl font-semibold mb-4">
          üõ°Ô∏è Claims comunes en JWT
        </h2>
        <ul className="list-disc pl-5">
          <li>
            <code>iss</code>: Emisor del token
          </li>
          <li>
            <code>sub</code>: Identificador del sujeto (ej. ID del usuario)
          </li>
          <li>
            <code>exp</code>: Fecha de expiraci√≥n
          </li>
          <li>
            <code>iat</code>: Fecha de emisi√≥n
          </li>
          <li>
            <code>aud</code>: Audiencia destinataria
          </li>
          <li>
            <code>roles</code>, <code>scope</code>: Claims personalizadas para
            control de acceso
          </li>
        </ul>
      </section>

      <section>
        <h2 className="text-2xl font-semibold mb-4">
          ‚úÖ Ventajas y consideraciones
        </h2>
        <ul className="list-disc pl-5">
          <li>
            ‚úÖ Stateless: no es necesario mantener sesiones en el servidor.
          </li>
          <li>‚úÖ Escalable: ideal para arquitecturas distribuidas y SPAs.</li>
          <li>
            ‚úÖ Flexible: permite incluir datos adicionales √∫tiles para control
            de acceso.
          </li>
          <li>üîí Siempre usar HTTPS para evitar exposici√≥n del token.</li>
          <li>
            üîê Evitar incluir informaci√≥n sensible en el payload: el contenido
            es decodificable.
          </li>
          <li>
            ‚è≥ Usar expiraci√≥n (<code>exp</code>) y considerar{" "}
            <strong>refresh tokens</strong> para renovar sesiones.
          </li>
          <li>
            üö´ Revocar JWT no es trivial: requiere listas negras (blacklists) o
            expiraci√≥n corta.
          </li>
        </ul>
      </section>
    </div>
  );
}

export default SeguridadJWT;
